(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{162:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/bulkinsert-4129ccb9db423efb7acba791c869664b.png"},163:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/bulkinsertpaste-7ef598fe26f19703e399d00500d29b12.png"},76:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return u}));var r=n(3),i=(n(0),n(97));const a={id:"insertbulk",title:"Insert Bulk"},o={unversionedId:"insertbulk",id:"insertbulk",isDocsHomePage:!1,title:"Insert Bulk",description:"In SpeSQL you won't actually be handling any of the SQL insert statements, rather SpeSQL generates the queries for you using the CSV parser or form-based single insert. For inserting multiple entries into the database at one time, you will want to use the Bulk Insertion methods outlined below",source:"@site/docs/insertbulk.md",slug:"/insertbulk",permalink:"/spesql/docs/insertbulk",version:"current",sidebar:"docs",previous:{title:"CSV/XLSX Update",permalink:"/spesql/docs/updatecsv"},next:{title:"Insert Single",permalink:"/spesql/docs/insertsingle"}},l=[{value:"CSV File Upload",id:"csv-file-upload",children:[{value:"File Types",id:"file-types",children:[]},{value:"Table &amp; File Selection",id:"table--file-selection",children:[]},{value:"Row-by-Row",id:"row-by-row",children:[]},{value:"All at Once",id:"all-at-once",children:[]},{value:"Download Failures",id:"download-failures",children:[]}]},{value:"CSV Paste",id:"csv-paste",children:[{value:"CSV Paste Structure",id:"csv-paste-structure",children:[]}]}],s={rightToc:l};function u({components:e,...t}){return Object(i.b)("wrapper",Object(r.a)({},s,t,{components:e,mdxType:"MDXLayout"}),Object(i.b)("p",null,"In SpeSQL you won't actually be handling any of the SQL insert statements, rather SpeSQL generates the queries for you using the CSV parser or form-based single insert. For inserting multiple entries into the database at one time, you will want to use the Bulk Insertion methods outlined below"),Object(i.b)("h2",{id:"csv-file-upload"},"CSV File Upload"),Object(i.b)("img",{src:n(162).default,alt:"Bulk Insert",class:"shadow round"}),Object(i.b)("br",null),Object(i.b)("br",null),Object(i.b)("h3",{id:"file-types"},"File Types"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},".csv")," and ",Object(i.b)("inlineCode",{parentName:"p"},".xlsx")," files are supported. Only one file per upload. If you are uploading an ",Object(i.b)("inlineCode",{parentName:"p"},".xlsx")," file be sure there is only one sheet in the document."),Object(i.b)("h3",{id:"table--file-selection"},"Table & File Selection"),Object(i.b)("p",null,"All that is required to run an insert query is to select the target destination (the table in the database to insert into) and then the CSV/XLSX file containing the entries to insert. In the File Upload method, you simply drag and drop your desired CSV file to load it in."),Object(i.b)("h3",{id:"row-by-row"},"Row-by-Row"),Object(i.b)("p",null,"Row-by-row insertion will run insert statements one-to-one with how many rows there are; rows will be validated and then inserted one at a time. The benefit with this method is that if a row were to pass client-side validation but throw a server error, this entry simply gets logged and skipped."),Object(i.b)("p",null,"This method takes a considerable amount of time to process and insert"),Object(i.b)("h3",{id:"all-at-once"},"All at Once"),Object(i.b)("p",null,"This is the 'true' bulk insert option; validation is run on all of the rows, and valid entries are added to a singluar insert query. The major benefit of this method is the time it takes to process and insert the data. One consideration is that since this is a singular query, if one of the entries throws a server-side error the entire query will fail."),Object(i.b)("h3",{id:"download-failures"},"Download Failures"),Object(i.b)("p",null,"If selected, any rows that fail validation will be downloaded to their own CSV document. This is a utility added so that you may automically separate the rows that were uploaded from those that were not."),Object(i.b)("h2",{id:"csv-paste"},"CSV Paste"),Object(i.b)("img",{src:n(163).default,alt:"Bulk Insert Paste",class:"shadow round"}),Object(i.b)("br",null),Object(i.b)("br",null),Object(i.b)("p",null,"Much of the CSV File Upload information above is applicable to this method, as well. The main difference is the way in which data gets loaded in."),Object(i.b)("h3",{id:"csv-paste-structure"},"CSV Paste Structure"),Object(i.b)("p",null,"Rather than uploading the file using a file selection pop-up dialogue, you copy and paste the data directly into the text-area. An important note is to ensure you always paste the header row, otherwise the query will be rejected."))}u.isMDXComponent=!0},97:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return h}));var r=n(0),i=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=i.a.createContext({}),c=function(e){var t=i.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return i.a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},b=i.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),b=r,h=d["".concat(o,".").concat(b)]||d[b]||p[b]||a;return n?i.a.createElement(h,l(l({ref:t},u),{},{components:n})):i.a.createElement(h,l({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=b;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var u=2;u<a;u++)o[u]=n[u];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);